
# 图中红色边代表变量间相似性为正，绿色边代表变量间相似性为负；点的大小与此点与周围变量的连接线数目相关；边的大小代表相关性的大小；
library(igraph)
library(visNetwork)
library(Hmisc) # For rcorr() which calculates correlations and P-values

# Calculate Spearman correlations and P-values
cor_res <- rcorr(as.matrix(mtcars), type = "spearman")

# Extract correlation matrix and P-value matrix
cor_mat <- cor_res$r
p_mat <- cor_res$P


# Thresholds for filtering
cor_threshold = 0.6
p_value_threshold = 0.01

# Create a graph from the correlation matrix
cor_g <- graph_from_adjacency_matrix(cor_mat, mode='undirected', weighted = TRUE, diag = FALSE)

# Convert graph to edge list
cor_edge_list <- as_data_frame(cor_g, 'edges')

# Add P-values to the edge list
cor_edge_list$p_value <- mapply(function(from, to) p_mat[from, to], cor_edge_list$from, cor_edge_list$to)
cor_edge_list$Color <- ifelse(cor_edge_list$weight > 0, "red", "green")
# Filter edges based on correlation magnitude and P-value
filtered_edges <- cor_edge_list[abs(cor_edge_list$weight) > cor_threshold & cor_edge_list$p_value < p_value_threshold, ]

filtered_edges$weight <- abs(filtered_edges$weight)

# 计算缩放后的边厚度
max_weight <- max(filtered_edges$weight) # 获取最大权重
scaled_edge_width <- filtered_edges$weight / max_weight * 3 # 缩放权重，并乘以一个常数

# 创建新图
new_g <- graph_from_data_frame(filtered_edges, directed = FALSE)

# 添加颜色属性到图的边上
E(new_g)$color <- filtered_edges$Color

# 计算每个节点的度数并设置为节点大小
node_degrees  <- degree(new_g)

# 找到最大的度数
max_degree <- max(node_degrees)

# 对节点大小进行归一化，并乘以一个常数以便更好地展示
normalized_sizes <- (node_degrees / max_degree) * 30  # 这里的30是一个示例常数，您可以根据需要调整

# 将归一化后的大小赋值给节点的size属性
V(new_g)$size <- normalized_sizes



# 执行 Louvain 社区检测
lc <- cluster_louvain(new_g)

# 使用 layout_nicely 函数来获取布局
# layout <- layout_on_grid(new_g)
# layout <- layout_with_lgl (new_g)
layout <- layout_nicely(new_g)



# 打开PNG图形设备
png(file="network_plot.png", width=800, height=600)

# 绘制网络图
plot(lc, new_g, layout=layout, edge.color=E(new_g)$color, edge.width=scaled_edge_width, vertex.size=V(new_g)$size, vertex.label.cex=0.5)

# 关闭图形设备，保存图形
dev.off()
